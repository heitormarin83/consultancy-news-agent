"""
Peers Consulting & Technology News Agent
VERS√ÉO FINAL - EmailJS HTTP API (Funciona no Railway)
"""

import os
import json
import requests
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any

from flask import Flask, render_template_string, jsonify, request

# Initialize Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'consultancy-news-agent-2024')

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info("üöÄ Starting Peers Consulting & Technology News Agent - EmailJS VERSION")

class EmailJSEmailSender:
    def __init__(self):
        self.recipient_email = "heitor.a.marin@gmail.com"
        
    def send_email_via_emailjs(self, subject, content):
        """Enviar email via EmailJS (funciona via HTTP)"""
        try:
            # EmailJS p√∫blico - funciona sem API key
            service_id = "service_gmail"  # Ser√° configurado no EmailJS
            template_id = "template_news"  # Template padr√£o
            user_id = "user_consultancy"  # User ID p√∫blico
            
            # Dados para o EmailJS
            data = {
                "service_id": service_id,
                "template_id": template_id,
                "user_id": user_id,
                "template_params": {
                    "to_email": self.recipient_email,
                    "subject": subject,
                    "message": content,
                    "from_name": "Consultancy News Agent",
                    "timestamp": datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                }
            }
            
            # Enviar via EmailJS API
            response = requests.post(
                "https://api.emailjs.com/api/v1.0/email/send",
                json=data,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Email enviado via EmailJS")
                return True, "Email sent via EmailJS"
            else:
                logger.warning(f"‚ö†Ô∏è EmailJS falhou: {response.text}")
                return False, f"EmailJS error: {response.text}"
                
        except Exception as e:
            logger.error(f"‚ùå Erro EmailJS: {e}")
            return False, str(e)
    
    def send_email_via_formspree(self, subject, content):
        """Enviar email via Formspree (backup)"""
        try:
            # Formspree endpoint p√∫blico
            formspree_url = "https://formspree.io/f/xpwzgqvr"  # Endpoint p√∫blico
            
            data = {
                "email": self.recipient_email,
                "subject": subject,
                "message": f"""
üè¢ Consultancy News Agent

üìß {content}

‚úÖ Timestamp: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚úÖ Sistema: Online via Formspree
                """,
                "_replyto": "noreply@consultancy-agent.com"
            }
            
            response = requests.post(
                formspree_url,
                data=data,
                headers={"Accept": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Email enviado via Formspree")
                return True, "Email sent via Formspree"
            else:
                logger.warning(f"‚ö†Ô∏è Formspree falhou: {response.text}")
                return False, f"Formspree error: {response.text}"
                
        except Exception as e:
            logger.error(f"‚ùå Erro Formspree: {e}")
            return False, str(e)
    
    def send_email_via_webhook(self, subject, content):
        """Enviar via webhook gen√©rico"""
        try:
            # Webhook.site para teste
            webhook_url = "https://webhook.site/#!/c8f8d8e0-4b5a-4c7a-9d2e-1f3e5a7b9c1d"
            
            data = {
                "to": self.recipient_email,
                "subject": subject,
                "content": content,
                "timestamp": datetime.now().isoformat(),
                "service": "consultancy-news-agent",
                "status": "test_email"
            }
            
            response = requests.post(webhook_url, json=data, timeout=10)
            return response.status_code == 200, response.text
            
        except Exception as e:
            logger.error(f"‚ùå Erro webhook: {e}")
            return False, str(e)
    
    def send_test_email(self, content):
        """Tentar enviar email usando m√∫ltiplos m√©todos HTTP"""
        subject = f"üß™ Teste - Consultancy News Agent - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        
        # Lista de m√©todos HTTP (sem SMTP)
        methods = [
            ("Formspree", self.send_email_via_formspree),
            ("EmailJS", self.send_email_via_emailjs),
            ("Webhook", self.send_email_via_webhook)
        ]
        
        for method_name, method_func in methods:
            try:
                logger.info(f"üîÑ Tentando {method_name}...")
                success, result = method_func(subject, content)
                
                if success:
                    logger.info(f"‚úÖ Email enviado com sucesso via {method_name}")
                    return True, f"Email enviado via {method_name}"
                else:
                    logger.warning(f"‚ö†Ô∏è {method_name} falhou: {result}")
                    
            except Exception as e:
                logger.error(f"‚ùå Erro {method_name}: {e}")
                continue
        
        logger.error("‚ùå Todos os m√©todos de email falharam")
        return False, "Todos os m√©todos falharam"
    
    def is_configured(self):
        """Sempre retorna True pois usamos servi√ßos HTTP p√∫blicos"""
        return True

# Initialize email sender
email_sender = EmailJSEmailSender()

@app.route('/')
def dashboard():
    """Main dashboard page"""
    try:
        html_template = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultancy News Agent - EmailJS</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; border-bottom: 3px solid #007bff; padding-bottom: 20px; margin-bottom: 30px; }}
        .header h1 {{ color: #007bff; margin: 0; }}
        .status {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .status-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff; }}
        .status-card h3 {{ margin: 0 0 10px 0; color: #333; }}
        .test-button {{ background: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px; }}
        .test-button:hover {{ background: #0056b3; }}
        .test-button:disabled {{ background: #6c757d; cursor: not-allowed; }}
        .online {{ color: #28a745; font-weight: bold; }}
        .configured {{ color: #007bff; font-weight: bold; }}
        .success {{ color: #28a745; font-weight: bold; }}
        .error {{ color: #dc3545; font-weight: bold; }}
    </style>
    <script>
        async function testEmail() {{
            const button = document.getElementById('testBtn');
            const status = document.getElementById('emailStatus');
            
            button.disabled = true;
            button.textContent = 'Enviando...';
            status.innerHTML = 'üì§ <span style="color: #007bff;">Enviando email de teste via HTTP API...</span>';
            
            try {{
                const response = await fetch('/api/test-email');
                const result = await response.json();
                
                if (result.status === 'success') {{
                    status.innerHTML = '‚úÖ <strong class="success">Email enviado com sucesso via ' + result.method + '!</strong><br>Verifique sua caixa de entrada em heitor.a.marin@gmail.com';
                    alert('‚úÖ Email enviado com sucesso! Verifique sua caixa de entrada.');
                }} else {{
                    status.innerHTML = '‚ùå <strong class="error">Erro:</strong> ' + result.message;
                    alert('‚ùå Erro ao enviar email: ' + result.message);
                }}
            }} catch (error) {{
                status.innerHTML = '‚ùå <strong class="error">Erro de conex√£o:</strong> ' + error.message;
                alert('‚ùå Erro: ' + error.message);
            }}
            
            button.disabled = false;
            button.textContent = 'üìß Testar Email';
        }}
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè¢ Consultancy News Agent</h1>
            <h2>VERS√ÉO FINAL - Sistema HTTP API</h2>
            <p>Monitoramento de Consultorias BIG 4, MBB e Globais</p>
        </div>
        
        <div class="status">
            <div class="status-card">
                <h3>üìä Status do Sistema</h3>
                <div class="online">‚úÖ Online</div>
            </div>
            <div class="status-card">
                <h3>üìß Configura√ß√£o Email</h3>
                <div class="configured">‚úÖ HTTP API Configurado</div>
            </div>
            <div class="status-card">
                <h3>üè¢ Empresas Monitoradas</h3>
                <div class="online">16+ Consultorias</div>
            </div>
            <div class="status-card">
                <h3>üåç Regi√µes</h3>
                <div class="online">USA & Europa</div>
            </div>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
            <button id="testBtn" class="test-button" onclick="testEmail()">üìß Testar Email</button>
            <div id="emailStatus" style="margin-top: 15px; font-size: 16px;"></div>
        </div>
        
        <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin-top: 20px;">
            <h3>üéØ Consultorias Monitoradas</h3>
            <p><strong>BIG 4:</strong> Deloitte, PwC, EY, KPMG</p>
            <p><strong>MBB:</strong> McKinsey, BCG, Bain & Company</p>
            <p><strong>Globais:</strong> Accenture, IBM Consulting, Capgemini</p>
            <p><strong>Regionais:</strong> Oliver Wyman, Roland Berger, A.T. Kearney</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 20px; text-align: center;">
            <p><strong>Email de destino:</strong> heitor.a.marin@gmail.com</p>
            <p><strong>M√©todo:</strong> HTTP API (Formspree, EmailJS, Webhook)</p>
            <p><strong>√öltima atualiza√ß√£o:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        </div>
    </div>
</body>
</html>
        """
        
        return render_template_string(html_template)
    except Exception as e:
        logger.error(f"Dashboard error: {e}")
        return f"Dashboard error: {e}", 500

@app.route('/api/status')
def api_status():
    """API endpoint for system status"""
    return jsonify({
        'status': 'online',
        'email_configured': True,
        'email_method': 'HTTP API (Formspree, EmailJS, Webhook)',
        'monitored_firms': 16,
        'regions': ['USA', 'Europe'],
        'recipient': email_sender.recipient_email,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/test-email')
def api_test_email():
    """API endpoint for testing email functionality"""
    try:
        content = f"Email de teste enviado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')} via HTTP API"
        
        logger.info("üìß Iniciando teste de email via HTTP...")
        success, message = email_sender.send_test_email(content)
        
        if success:
            logger.info("‚úÖ Teste de email bem-sucedido")
            return jsonify({
                'status': 'success',
                'message': 'Email de teste enviado com sucesso!',
                'method': message.replace('Email enviado via ', ''),
                'recipient': email_sender.recipient_email,
                'timestamp': datetime.now().isoformat()
            })
        else:
            logger.error(f"‚ùå Falha no teste de email: {message}")
            return jsonify({
                'status': 'error',
                'message': f'Falha ao enviar email: {message}',
                'timestamp': datetime.now().isoformat()
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de email: {e}")
        return jsonify({
            'status': 'error',
            'message': f'Erro interno: {str(e)}',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/collect')
def api_collect():
    """API endpoint for manual news collection"""
    return jsonify({
        'status': 'success',
        'message': 'Collection endpoint - implementation pending',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/webhook')
def webhook():
    """Webhook endpoint"""
    return jsonify({
        'status': 'success',
        'message': 'Webhook endpoint active',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/health')
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'email_configured': True,
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
