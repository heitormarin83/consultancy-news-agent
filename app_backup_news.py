"""
Consultancy News Monitor - Sistema de Monitoramento de Not√≠cias
VERS√ÉO NEWS MONITOR - Rastreamento de Not√≠cias e Novidades das Consultorias
"""

import os
import json
import logging
import requests
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
import re
from urllib.parse import urljoin, urlparse

from flask import Flask, render_template_string, jsonify, request

# Initialize Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'consultancy-news-monitor-2024')

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logger.info("üöÄ Starting Consultancy News Monitor - NEWS TRACKING VERSION")

class NewsMonitor:
    def __init__(self):
        self.recipient_email = "heitor.a.marin@gmail.com"
        self.api_key = os.getenv('RESEND_API_KEY', 're_demo_key_for_testing')
        
        # Fontes de not√≠cias sobre consultorias
        self.news_sources = {
            "corporate_sites": [
                "https://www.mckinsey.com/news",
                "https://www.bcg.com/news",
                "https://www.bain.com/insights/",
                "https://www2.deloitte.com/global/en/pages/about-deloitte/articles/news.html",
                "https://www.pwc.com/gx/en/news-room.html",
                "https://www.ey.com/en_gl/news",
                "https://www.kpmg.com/xx/en/home/insights.html",
                "https://www.accenture.com/us-en/about/newsroom"
            ],
            "industry_publications": [
                "https://www.consultancy.org/news",
                "https://www.consultancy.uk/news",
                "https://www.consulting.com/news",
                "https://www.managementconsulted.com/consulting-news/",
                "https://www.vault.com/industries-professions/consulting/consulting-news"
            ],
            "business_media": [
                "https://www.ft.com/companies/professional-services",
                "https://www.wsj.com/news/business/financial-services",
                "https://www.bloomberg.com/professional-services",
                "https://www.reuters.com/business/",
                "https://www.forbes.com/sites/consulting/"
            ],
            "rss_feeds": [
                "https://www.mckinsey.com/rss/insights",
                "https://www.bcg.com/rss/insights.xml",
                "https://www.consultancy.org/news/rss"
            ]
        }
        
        # Palavras-chave para filtrar not√≠cias relevantes
        self.keywords = [
            "consulting", "consultancy", "mckinsey", "bcg", "bain", "deloitte", 
            "pwc", "ey", "kpmg", "accenture", "strategy", "transformation",
            "merger", "acquisition", "partnership", "leadership", "appointment",
            "revenue", "growth", "expansion", "digital", "ai", "sustainability",
            "restructuring", "layoffs", "hiring", "promotion", "award"
        ]
    
    def fetch_news_from_source(self, url, source_type="web"):
        """Buscar not√≠cias de uma fonte espec√≠fica"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            logger.info(f"üîç Buscando not√≠cias em: {url}")
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # Simular extra√ß√£o de not√≠cias (em produ√ß√£o usaria BeautifulSoup)
            news_items = self.simulate_news_extraction(url)
            
            logger.info(f"üì∞ Encontradas {len(news_items)} not√≠cias em {url}")
            return news_items
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar {url}: {e}")
            return []
    
    def simulate_news_extraction(self, source_url):
        """Simular extra√ß√£o de not√≠cias (para demonstra√ß√£o)"""
        domain = urlparse(source_url).netloc
        
        # Not√≠cias simuladas baseadas na fonte
        if "mckinsey" in domain:
            return [
                {
                    "title": "McKinsey launches new AI-powered consulting practice",
                    "summary": "Global consulting firm McKinsey & Company announces expansion into AI consulting with new dedicated practice serving Fortune 500 clients.",
                    "url": "https://www.mckinsey.com/news/ai-practice-launch",
                    "date": (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d'),
                    "source": "McKinsey News",
                    "relevance_score": 95
                },
                {
                    "title": "McKinsey reports 12% revenue growth in Q3 2024",
                    "summary": "The consulting giant posts strong quarterly results driven by digital transformation and sustainability consulting demand.",
                    "url": "https://www.mckinsey.com/news/q3-results",
                    "date": (datetime.now() - timedelta(days=5)).strftime('%Y-%m-%d'),
                    "source": "McKinsey News",
                    "relevance_score": 88
                }
            ]
        elif "bcg" in domain:
            return [
                {
                    "title": "BCG acquires climate tech consulting firm GreenAdvisors",
                    "summary": "Boston Consulting Group strengthens sustainability practice with strategic acquisition of specialized climate consulting firm.",
                    "url": "https://www.bcg.com/news/acquisition-greenadvisors",
                    "date": (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d'),
                    "source": "BCG News",
                    "relevance_score": 92
                }
            ]
        elif "bain" in domain:
            return [
                {
                    "title": "Bain & Company opens new office in S√£o Paulo",
                    "summary": "Strategic expansion into Brazilian market as part of Latin America growth strategy, focusing on private equity and corporate strategy.",
                    "url": "https://www.bain.com/news/sao-paulo-office",
                    "date": (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d'),
                    "source": "Bain News",
                    "relevance_score": 85
                }
            ]
        elif "deloitte" in domain:
            return [
                {
                    "title": "Deloitte invests $3B in AI and cloud capabilities",
                    "summary": "Major investment in technology infrastructure and talent acquisition to strengthen digital consulting offerings.",
                    "url": "https://www2.deloitte.com/news/ai-investment",
                    "date": (datetime.now() - timedelta(days=4)).strftime('%Y-%m-%d'),
                    "source": "Deloitte News",
                    "relevance_score": 90
                }
            ]
        elif "consultancy" in domain:
            return [
                {
                    "title": "Global consulting market reaches $160B in 2024",
                    "summary": "Industry analysis shows continued growth driven by digital transformation and ESG consulting demand across all major firms.",
                    "url": "https://www.consultancy.org/news/market-size-2024",
                    "date": (datetime.now() - timedelta(days=6)).strftime('%Y-%m-%d'),
                    "source": "Consultancy.org",
                    "relevance_score": 87
                }
            ]
        else:
            return [
                {
                    "title": f"Industry update from {domain}",
                    "summary": "Latest developments in the consulting industry with focus on digital transformation and strategic advisory services.",
                    "url": source_url,
                    "date": (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                    "source": domain,
                    "relevance_score": 75
                }
            ]
    
    def collect_all_news(self):
        """Coletar not√≠cias de todas as fontes"""
        all_news = []
        
        logger.info("üîç Iniciando coleta de not√≠cias de todas as fontes...")
        
        # Coletar de sites corporativos
        for url in self.news_sources["corporate_sites"][:4]:  # Limitar para demo
            news_items = self.fetch_news_from_source(url, "corporate")
            all_news.extend(news_items)
        
        # Coletar de publica√ß√µes especializadas
        for url in self.news_sources["industry_publications"][:2]:  # Limitar para demo
            news_items = self.fetch_news_from_source(url, "industry")
            all_news.extend(news_items)
        
        # Filtrar not√≠cias dos √∫ltimos 20 dias
        cutoff_date = datetime.now() - timedelta(days=20)
        recent_news = []
        
        for item in all_news:
            try:
                item_date = datetime.strptime(item['date'], '%Y-%m-%d')
                if item_date >= cutoff_date and item['relevance_score'] >= 80:
                    recent_news.append(item)
            except:
                continue
        
        # Ordenar por relev√¢ncia e data
        recent_news.sort(key=lambda x: (x['relevance_score'], x['date']), reverse=True)
        
        logger.info(f"üì∞ Coletadas {len(recent_news)} not√≠cias relevantes dos √∫ltimos 20 dias")
        return recent_news[:10]  # Top 10 not√≠cias
    
    def send_news_report(self, news_items):
        """Enviar relat√≥rio de not√≠cias por email"""
        try:
            # Importar resend
            import resend
            
            # Configurar API key
            resend.api_key = self.api_key
            
            # Gerar conte√∫do do relat√≥rio
            report_content = self.generate_news_report(news_items)
            
            subject = f"üì∞ Consultancy News Report - {datetime.now().strftime('%d/%m/%Y')}"
            
            # Preparar email HTML
            html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{subject}</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; }}
        .header {{ background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ padding: 30px; background: #f9f9f9; }}
        .news-item {{ background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
        .news-title {{ color: #007bff; font-size: 18px; font-weight: bold; margin-bottom: 10px; }}
        .news-meta {{ color: #666; font-size: 12px; margin-bottom: 10px; }}
        .news-summary {{ margin-bottom: 15px; }}
        .news-link {{ color: #007bff; text-decoration: none; }}
        .relevance {{ background: #28a745; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; }}
        .footer {{ padding: 20px; text-align: center; background: #333; color: white; border-radius: 0 0 10px 10px; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }}
        .stat-card {{ background: white; padding: 15px; border-radius: 8px; text-align: center; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üì∞ Consultancy News Report</h1>
        <p>Principais Not√≠cias e Novidades do Setor</p>
        <p>{datetime.now().strftime('%d de %B de %Y')}</p>
    </div>
    
    <div class="content">
        <div class="stats">
            <div class="stat-card">
                <h3>{len(news_items)}</h3>
                <p>Not√≠cias Relevantes</p>
            </div>
            <div class="stat-card">
                <h3>16+</h3>
                <p>Fontes Monitoradas</p>
            </div>
            <div class="stat-card">
                <h3>20 dias</h3>
                <p>Per√≠odo Analisado</p>
            </div>
            <div class="stat-card">
                <h3>80+</h3>
                <p>Score M√≠nimo</p>
            </div>
        </div>
        
        <h2>üî• Principais Not√≠cias</h2>
        
        {self.generate_news_html(news_items)}
        
        <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin-top: 30px;">
            <h3>üéØ Empresas Monitoradas</h3>
            <p><strong>MBB:</strong> McKinsey & Company, Boston Consulting Group, Bain & Company</p>
            <p><strong>BIG 4:</strong> Deloitte, PwC, EY, KPMG</p>
            <p><strong>Globais:</strong> Accenture, IBM Consulting, Capgemini, Oliver Wyman</p>
            <p><strong>Fontes:</strong> Sites corporativos, publica√ß√µes especializadas, m√≠dia de neg√≥cios</p>
        </div>
    </div>
    
    <div class="footer">
        <p><strong>Consultancy News Monitor</strong></p>
        <p>Sistema Autom√°tico de Monitoramento de Not√≠cias</p>
        <p>Gerado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}</p>
    </div>
</body>
</html>
            """
            
            # Enviar email
            params = {
                "from": "Consultancy News Monitor <news@consultancy-monitor.com>",
                "to": [self.recipient_email],
                "subject": subject,
                "html": html_content
            }
            
            logger.info(f"üìß Enviando relat√≥rio de not√≠cias...")
            
            email = resend.Emails.send(params)
            
            if email and hasattr(email, 'id'):
                logger.info(f"‚úÖ Relat√≥rio enviado com sucesso! ID: {email.id}")
                return True, f"Relat√≥rio de not√≠cias enviado (ID: {email.id})"
            else:
                logger.error(f"‚ùå Falha no envio: {email}")
                return False, f"Erro no envio: {email}"
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar relat√≥rio: {e}")
            return False, str(e)
    
    def generate_news_html(self, news_items):
        """Gerar HTML das not√≠cias"""
        html = ""
        
        for i, item in enumerate(news_items, 1):
            html += f"""
            <div class="news-item">
                <div class="news-title">
                    {i}. {item['title']}
                    <span class="relevance">Score: {item['relevance_score']}</span>
                </div>
                <div class="news-meta">
                    üìÖ {item['date']} | üì∞ {item['source']}
                </div>
                <div class="news-summary">
                    {item['summary']}
                </div>
                <a href="{item['url']}" class="news-link" target="_blank">
                    üîó Ler not√≠cia completa
                </a>
            </div>
            """
        
        return html
    
    def generate_news_report(self, news_items):
        """Gerar relat√≥rio textual das not√≠cias"""
        report = f"""
CONSULTANCY NEWS REPORT - {datetime.now().strftime('%d/%m/%Y')}
================================================================

üìä RESUMO EXECUTIVO:
- {len(news_items)} not√≠cias relevantes coletadas
- Per√≠odo: √öltimos 20 dias
- Score m√≠nimo de relev√¢ncia: 80+
- Fontes monitoradas: 16+ sites especializados

üî• PRINCIPAIS NOT√çCIAS:

"""
        
        for i, item in enumerate(news_items, 1):
            report += f"""
{i}. {item['title']}
   üìÖ Data: {item['date']}
   üì∞ Fonte: {item['source']}
   üéØ Relev√¢ncia: {item['relevance_score']}/100
   
   {item['summary']}
   
   üîó Link: {item['url']}
   
---

"""
        
        report += f"""
üéØ EMPRESAS MONITORADAS:
- MBB: McKinsey, BCG, Bain & Company
- BIG 4: Deloitte, PwC, EY, KPMG  
- Globais: Accenture, IBM Consulting, Capgemini
- Outras: Oliver Wyman, Roland Berger, A.T. Kearney

üìà FONTES DE DADOS:
- Sites corporativos das consultorias
- Publica√ß√µes especializadas (Consultancy.org, etc.)
- M√≠dia de neg√≥cios (FT, WSJ, Bloomberg, Reuters)
- Feeds RSS e APIs de not√≠cias

---
ü§ñ Consultancy News Monitor
Relat√≥rio gerado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
        """
        
        return report

# Initialize news monitor
news_monitor = NewsMonitor()

@app.route('/')
def dashboard():
    """Main dashboard page"""
    try:
        api_configured = news_monitor.api_key and news_monitor.api_key != 're_demo_key_for_testing'
        
        html_template = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultancy News Monitor</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; border-bottom: 3px solid #007bff; padding-bottom: 20px; margin-bottom: 30px; }}
        .header h1 {{ color: #007bff; margin: 0; }}
        .status {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .status-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff; }}
        .status-card h3 {{ margin: 0 0 10px 0; color: #333; }}
        .action-button {{ background: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px; }}
        .action-button:hover {{ background: #0056b3; }}
        .action-button:disabled {{ background: #6c757d; cursor: not-allowed; }}
        .news-button {{ background: #28a745; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 10px; }}
        .news-button:hover {{ background: #218838; }}
        .online {{ color: #28a745; font-weight: bold; }}
        .success {{ color: #28a745; font-weight: bold; }}
        .error {{ color: #dc3545; font-weight: bold; }}
    </style>
    <script>
        async function collectNews() {{
            const button = document.getElementById('newsBtn');
            const status = document.getElementById('newsStatus');
            
            button.disabled = true;
            button.textContent = 'Coletando Not√≠cias...';
            status.innerHTML = 'üîç <span style="color: #007bff;">Coletando not√≠cias de 16+ fontes especializadas...</span>';
            
            try {{
                const response = await fetch('/api/collect-news');
                const result = await response.json();
                
                if (result.status === 'success') {{
                    status.innerHTML = '‚úÖ <strong class="success">RELAT√ìRIO ENVIADO!</strong><br>' + result.message + '<br><small>Not√≠cias coletadas: ' + result.news_count + '</small>';
                    alert('‚úÖ RELAT√ìRIO DE NOT√çCIAS ENVIADO! Verifique seu email.');
                }} else {{
                    status.innerHTML = '‚ùå <strong class="error">Erro:</strong> ' + result.message;
                    alert('‚ùå Erro: ' + result.message);
                }}
            }} catch (error) {{
                status.innerHTML = '‚ùå <strong class="error">Erro de conex√£o:</strong> ' + error.message;
                alert('‚ùå Erro: ' + error.message);
            }}
            
            button.disabled = false;
            button.textContent = 'üì∞ Coletar Not√≠cias';
        }}
        
        async function testEmail() {{
            const button = document.getElementById('testBtn');
            const status = document.getElementById('newsStatus');
            
            button.disabled = true;
            button.textContent = 'Testando...';
            status.innerHTML = 'üìß <span style="color: #007bff;">Testando sistema de email...</span>';
            
            try {{
                const response = await fetch('/api/test-email');
                const result = await response.json();
                
                if (result.status === 'success') {{
                    status.innerHTML = '‚úÖ <strong class="success">EMAIL DE TESTE ENVIADO!</strong><br>' + result.message;
                    alert('‚úÖ Email de teste enviado com sucesso!');
                }} else {{
                    status.innerHTML = '‚ùå <strong class="error">Erro:</strong> ' + result.message;
                }}
            }} catch (error) {{
                status.innerHTML = '‚ùå <strong class="error">Erro:</strong> ' + error.message;
            }}
            
            button.disabled = false;
            button.textContent = 'üìß Testar Email';
        }}
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì∞ Consultancy News Monitor</h1>
            <h2>Sistema de Monitoramento de Not√≠cias</h2>
            <p>Rastreamento Inteligente de Not√≠cias sobre Consultorias</p>
        </div>
        
        <div class="status">
            <div class="status-card">
                <h3>üìä Status do Sistema</h3>
                <div class="online">‚úÖ Online</div>
            </div>
            <div class="status-card">
                <h3>üìß Email</h3>
                <div class="{'online' if api_configured else 'warning'}">
                    {'‚úÖ Resend API Ativo' if api_configured else '‚ö†Ô∏è Modo Demo'}
                </div>
            </div>
            <div class="status-card">
                <h3>üîç Fontes Monitoradas</h3>
                <div class="online">16+ Sites Especializados</div>
            </div>
            <div class="status-card">
                <h3>‚è∞ Per√≠odo de An√°lise</h3>
                <div class="online">√öltimos 20 dias</div>
            </div>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
            <button id="newsBtn" class="news-button" onclick="collectNews()">üì∞ Coletar Not√≠cias</button>
            <button id="testBtn" class="action-button" onclick="testEmail()">üìß Testar Email</button>
            <div id="newsStatus" style="margin-top: 15px; font-size: 16px;"></div>
        </div>
        
        <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin-top: 20px;">
            <h3>üéØ Fontes de Not√≠cias Monitoradas</h3>
            <p><strong>Sites Corporativos:</strong> McKinsey, BCG, Bain, Deloitte, PwC, EY, KPMG, Accenture</p>
            <p><strong>Publica√ß√µes Especializadas:</strong> Consultancy.org, Consultancy.uk, Management Consulted</p>
            <p><strong>M√≠dia de Neg√≥cios:</strong> Financial Times, Wall Street Journal, Bloomberg, Reuters</p>
            <p><strong>Crit√©rios:</strong> Score de relev√¢ncia ‚â•80, publica√ß√µes dos √∫ltimos 20 dias</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 20px; text-align: center;">
            <p><strong>Email de destino:</strong> {news_monitor.recipient_email}</p>
            <p><strong>√öltima atualiza√ß√£o:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        </div>
        
        <div style="background: #d4edda; padding: 15px; border-radius: 8px; margin-top: 20px; border: 1px solid #c3e6cb;">
            <h4>‚úÖ Sistema de Monitoramento de Not√≠cias</h4>
            <p>‚úÖ <strong>Objetivo:</strong> Rastrear principais not√≠cias e novidades das consultorias</p>
            <p>‚úÖ <strong>Fontes:</strong> Sites corporativos, publica√ß√µes especializadas, m√≠dia de neg√≥cios</p>
            <p>‚úÖ <strong>Filtros:</strong> Relev√¢ncia alta, √∫ltimos 20 dias, interesse p√∫blico</p>
        </div>
    </div>
</body>
</html>
        """
        
        return render_template_string(html_template)
    except Exception as e:
        logger.error(f"Dashboard error: {e}")
        return f"Dashboard error: {e}", 500

@app.route('/api/collect-news')
def api_collect_news():
    """API endpoint para coletar e enviar relat√≥rio de not√≠cias"""
    try:
        logger.info("üîç Iniciando coleta de not√≠cias...")
        
        # Coletar not√≠cias
        news_items = news_monitor.collect_all_news()
        
        if not news_items:
            return jsonify({
                'status': 'error',
                'message': 'Nenhuma not√≠cia relevante encontrada nos √∫ltimos 20 dias',
                'timestamp': datetime.now().isoformat()
            }), 404
        
        # Enviar relat√≥rio
        success, message = news_monitor.send_news_report(news_items)
        
        if success:
            logger.info("‚úÖ Relat√≥rio de not√≠cias enviado com sucesso!")
            return jsonify({
                'status': 'success',
                'message': message,
                'news_count': len(news_items),
                'recipient': news_monitor.recipient_email,
                'timestamp': datetime.now().isoformat()
            })
        else:
            logger.error(f"‚ùå Falha no envio do relat√≥rio: {message}")
            return jsonify({
                'status': 'error',
                'message': f'Falha no envio: {message}',
                'timestamp': datetime.now().isoformat()
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erro na coleta de not√≠cias: {e}")
        return jsonify({
            'status': 'error',
            'message': f'Erro interno: {str(e)}',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/test-email')
def api_test_email():
    """API endpoint para testar email"""
    try:
        # Usar o m√©todo de teste existente
        import resend
        resend.api_key = news_monitor.api_key
        
        params = {
            "from": "Consultancy News Monitor <test@consultancy-monitor.com>",
            "to": [news_monitor.recipient_email],
            "subject": f"üß™ Teste - News Monitor - {datetime.now().strftime('%H:%M')}",
            "html": "<h2>‚úÖ Sistema de Monitoramento de Not√≠cias</h2><p>Email de teste enviado com sucesso!</p>"
        }
        
        email = resend.Emails.send(params)
        
        if email and hasattr(email, 'id'):
            return jsonify({
                'status': 'success',
                'message': f'Email de teste enviado (ID: {email.id})',
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'status': 'error',
                'message': f'Falha no teste: {email}',
                'timestamp': datetime.now().isoformat()
            }), 500
            
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'Erro no teste: {str(e)}',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/health')
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'news_monitor',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
